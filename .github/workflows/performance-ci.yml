name: Clinical Performance CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance checks daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '18'
  CI: true

jobs:
  performance-budget:
    name: Performance Budget Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Install performance tools
        run: |
          npm install -g lighthouse chrome-launcher serve
          
      - name: Setup baseline (if not exists)
        run: |
          if [ ! -f performance-baseline.json ]; then
            echo "Creating performance baseline..."
            timeout 300 npm run performance:baseline || echo "Baseline creation timeout"
          fi
          
      - name: Run performance validation
        id: performance
        run: |
          echo "Running clinical performance validation..."
          npm run performance:clinical > performance-report.txt 2>&1
          exit_code=$?
          
          echo "Performance validation exit code: $exit_code"
          
          # Output report for GitHub Actions
          cat performance-report.txt
          
          # Set output for later steps
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          echo "report_exists=$([ -f performance-report.txt ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          
          # Don't fail the job on warnings (exit code 1), only on critical issues (exit code 2)
          if [ $exit_code -eq 2 ]; then
            echo "Critical performance issues detected!"
            exit 2
          elif [ $exit_code -eq 1 ]; then
            echo "Performance warnings detected, but not failing the build"
            exit 0
          fi
          
      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: |
            performance-report.txt
            reports/performance/
            performance-baseline.json
          retention-days: 30
          
      - name: Comment PR with performance results
        if: github.event_name == 'pull_request' && steps.performance.outputs.report_exists == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = fs.readFileSync('performance-report.txt', 'utf8');
              const exitCode = ${{ steps.performance.outputs.exit_code }};
              
              const statusEmoji = exitCode === 0 ? '‚úÖ' : exitCode === 1 ? '‚ö†Ô∏è' : '‚ùå';
              const statusText = exitCode === 0 ? 'PASSED' : exitCode === 1 ? 'WARNING' : 'FAILED';
              
              const comment = `
              ## ${statusEmoji} Clinical Performance Report - ${statusText}
              
              <details>
              <summary>üìä Performance Validation Results (click to expand)</summary>
              
              \`\`\`
              ${report}
              \`\`\`
              
              </details>
              
              **Performance Standards:** Clinical Environment (60fps, <1s load time)
              
              ${exitCode === 2 ? 'üö® **Action Required:** Critical performance issues detected that may impact patient care.' : ''}
              ${exitCode === 1 ? '‚ö†Ô∏è **Attention:** Performance warnings detected. Consider optimizing before merge.' : ''}
              ${exitCode === 0 ? 'üéâ **Excellent:** All performance budgets passed!' : ''}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Failed to post performance comment:', error);
            }

  lighthouse-audit:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    needs: performance-budget
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build with bundle analysis
        run: npm run build
        
      - name: Check bundle sizes
        run: |
          echo "üîç Analyzing bundle sizes..."
          
          # Check total bundle size
          total_size=$(du -sk dist | cut -f1)
          echo "Total build size: ${total_size}KB"
          
          # Clinical environment budget: 250KB total
          max_size=250
          
          if [ $total_size -gt $max_size ]; then
            echo "‚ùå Bundle size ($total_size KB) exceeds clinical budget ($max_size KB)"
            echo "Consider code splitting, lazy loading, or removing unused dependencies"
            exit 1
          else
            echo "‚úÖ Bundle size within clinical budget"
          fi
          
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: dist/stats.html
          retention-days: 30
          
  accessibility-performance:
    name: Accessibility Performance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Run accessibility tests
        run: |
          echo "üîç Running accessibility performance checks..."
          
          # Start server in background
          npm run preview &
          server_pid=$!
          
          # Wait for server to start
          sleep 10
          
          # Install axe-core CLI if not available
          npm install -g @axe-core/cli
          
          # Run accessibility audit
          axe http://localhost:4173 --exit || echo "Accessibility issues detected"
          
          # Cleanup
          kill $server_pid
          
  performance-regression:
    name: Performance Regression Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies (base)
        run: npm ci
        
      - name: Generate baseline metrics
        run: |
          npm run build
          timeout 300 npm run performance:baseline || echo "Baseline timeout"
          mv performance-baseline.json baseline-metrics.json
          
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          
      - name: Install dependencies (PR)
        run: npm ci
        
      - name: Compare performance
        run: |
          npm run build
          cp baseline-metrics.json performance-baseline.json
          
          echo "üîç Detecting performance regressions..."
          npm run performance:clinical > regression-report.txt 2>&1
          exit_code=$?
          
          echo "Regression detection exit code: $exit_code"
          cat regression-report.txt
          
          if [ $exit_code -eq 2 ]; then
            echo "‚ùå Significant performance regression detected!"
            exit 2
          elif [ $exit_code -eq 1 ]; then
            echo "‚ö†Ô∏è Minor performance changes detected"
          else
            echo "‚úÖ No significant performance regression"
          fi
          
      - name: Upload regression report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: regression-report
          path: regression-report.txt
          retention-days: 30

  performance-monitoring:
    name: Performance Monitoring Setup
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Update performance baseline
        run: |
          echo "üìä Updating performance baseline for main branch..."
          npm run build
          npm run performance:baseline
          
      - name: Commit updated baseline
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -f performance-baseline.json ]; then
            git add performance-baseline.json
            git commit -m "chore: update performance baseline [skip ci]" || echo "No changes to commit"
            git push origin main || echo "No changes to push"
          fi